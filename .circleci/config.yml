version: 2.1

orbs:
  node: circleci/node@5.0.3
  aws-cli: circleci/aws-cli@3.1.4

jobs:
  build_and_test:
    executor: node/default
    steps:
      - checkout
      - node/install-packages:
          pkg-manager: npm
      - run:
          command: npm run build
          name: Building

  deploy:
    executor: aws-cli/default
    environment:
      PREVIOUS_INSTANCE_NAME: testserver-todeplot-nextjs
      NEW_INSTANCE_NAME: testserver-todeplot-nextjs
    steps:
      - aws-cli/setup:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          aws-region: AWS_REGION
      - run: 
          command: |
            if [ ! -z "$PREVIOUS_INSTANCE_NAME" ]
            then
              INSTANCE_ID=`aws ec2 describe-instances --filters "Name=tag:Name,Values=$PREVIOUS_INSTANCE_NAME" --query "Reservations[].Instances[].[InstanceId]" --output text`
              if [ ! -z "$INSTANCE_ID" ]
              then
                echo "Old instance ID: $INSTANCE_ID"
                aws ec2 terminate-instances --instance-ids $INSTANCE_ID
                echo "Terminated the previous instance"
              else
                echo "Did not found any instance with provided name"
              fi
            else
              echo "Previous instance name not provided so moving forward"
            fi

            if [ ! -z "$NEW_INSTANCE_NAME" ]
            then
              NEW_INSTANCE_ID=`aws ec2 run-instances --image-id ami-07ffb2f4d65357b42 --count 1 --instance-type t2.micro --key-name CircleCI --security-group-ids sg-0791c0115b3a5100a --tag-specifications "ResourceType=instance,Tags=[{Key=Name,Value=$NEW_INSTANCE_NAME}]" --query "Instances[].[InstanceId]" --output text`
              echo "New instance Id: $NEW_INSTANCE_ID"
              echo "Waiting for New Instance Start...."
              aws ec2 wait instance-running --instance-ids $NEW_INSTANCE_ID
              echo "Instance Successfully started"
              NEW_INSTANCE_IP=`aws ec2 describe-instances --instance-ids $NEW_INSTANCE_ID --query "Reservations[].Instances[].NetworkInterfaces[].Association.PublicIp" --output text`
              echo "New Instance IP: $NEW_INSTANCE_IP"
              echo "export NEW_INSTANCE_IP=$NEW_INSTANCE_IP" >> $BASH_ENV
            else
              echo "New Instance Name is Required!"
            fi
          name: Destorying Old instance and createing New
      - add_ssh_keys:
          fingerprints:
            - "c5:f2:8b:19:e8:19:37:d5:c0:93:80:c8:2b:16:ea:ee"
      - run:
          command: sleep 1m
          name: Waiting of SSH Server to start at New EC2 Instance
      - run:
          command: ssh -o StrictHostKeyChecking=accept-new -i $HOME/.ssh/id_rsa_4f5df96212ac1cd8d2475e6c1929e6fe ubuntu@$NEW_INSTANCE_IP "mkdir ~/App && cd ~ && curl -sL https://deb.nodesource.com/setup_16.x -o /tmp/nodesource_setup.sh && sudo bash /tmp/nodesource_setup.sh && sudo apt install nodejs && node -v"
          name: Performing SSH and Setting node environment
      - run:
          command: ssh -o StrictHostKeyChecking=accept-new -i $HOME/.ssh/id_rsa_4f5df96212ac1cd8d2475e6c1929e6fe ubuntu@$NEW_INSTANCE_IP "sudo npm install -g degit && cd ~/App && degit https://github.com/hiumesh/node-rest-api-jest-tests.git && npm install"
          name: Cloning the project
      - run:
          command: ssh -o StrictHostKeyChecking=accept-new -i $HOME/.ssh/id_rsa_4f5df96212ac1cd8d2475e6c1929e6fe ubuntu@$NEW_INSTANCE_IP "touch stater.sh && echo 'cd ~/App && npm start disown &' > stater.sh"
          name: Creating a stater script
      - run:
          command: ssh -o StrictHostKeyChecking=accept-new -i $HOME/.ssh/id_rsa_4f5df96212ac1cd8d2475e6c1929e6fe ubuntu@$NEW_INSTANCE_IP "sh stater.sh >/dev/null 2>&1 &"
          name: Starting Server
workflows:
  test_my_app:
    jobs:
      - build_and_test
      - deploy:
          requires:
            - build_and_test
          context:
            - CircleCITest